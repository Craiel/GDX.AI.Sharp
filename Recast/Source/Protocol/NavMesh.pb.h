// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol/NavMesh.proto

#ifndef PROTOBUF_Protocol_2fNavMesh_2eproto__INCLUDED
#define PROTOBUF_Protocol_2fNavMesh_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace GDX {
namespace AI {
class ProtoNavMeshTriangle;
class ProtoNavMeshTriangleDefaultTypeInternal;
extern ProtoNavMeshTriangleDefaultTypeInternal _ProtoNavMeshTriangle_default_instance_;
class ProtoNavMeshVector;
class ProtoNavMeshVectorDefaultTypeInternal;
extern ProtoNavMeshVectorDefaultTypeInternal _ProtoNavMeshVector_default_instance_;
class ProtoRecastTile;
class ProtoRecastTileDefaultTypeInternal;
extern ProtoRecastTileDefaultTypeInternal _ProtoRecastTile_default_instance_;
class ProtoRecastTiledNavMesh;
class ProtoRecastTiledNavMeshDefaultTypeInternal;
extern ProtoRecastTiledNavMeshDefaultTypeInternal _ProtoRecastTiledNavMesh_default_instance_;
}  // namespace AI
}  // namespace GDX

namespace GDX {
namespace AI {

namespace protobuf_Protocol_2fNavMesh_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Protocol_2fNavMesh_2eproto

// ===================================================================

class ProtoNavMeshVector : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GDX.AI.ProtoNavMeshVector) */ {
 public:
  ProtoNavMeshVector();
  virtual ~ProtoNavMeshVector();

  ProtoNavMeshVector(const ProtoNavMeshVector& from);

  inline ProtoNavMeshVector& operator=(const ProtoNavMeshVector& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoNavMeshVector& default_instance();

  static inline const ProtoNavMeshVector* internal_default_instance() {
    return reinterpret_cast<const ProtoNavMeshVector*>(
               &_ProtoNavMeshVector_default_instance_);
  }

  void Swap(ProtoNavMeshVector* other);

  // implements Message ----------------------------------------------

  inline ProtoNavMeshVector* New() const PROTOBUF_FINAL { return New(NULL); }

  ProtoNavMeshVector* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProtoNavMeshVector& from);
  void MergeFrom(const ProtoNavMeshVector& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProtoNavMeshVector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:GDX.AI.ProtoNavMeshVector)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable int _cached_size_;
  friend struct  protobuf_Protocol_2fNavMesh_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProtoNavMeshTriangle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GDX.AI.ProtoNavMeshTriangle) */ {
 public:
  ProtoNavMeshTriangle();
  virtual ~ProtoNavMeshTriangle();

  ProtoNavMeshTriangle(const ProtoNavMeshTriangle& from);

  inline ProtoNavMeshTriangle& operator=(const ProtoNavMeshTriangle& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoNavMeshTriangle& default_instance();

  static inline const ProtoNavMeshTriangle* internal_default_instance() {
    return reinterpret_cast<const ProtoNavMeshTriangle*>(
               &_ProtoNavMeshTriangle_default_instance_);
  }

  void Swap(ProtoNavMeshTriangle* other);

  // implements Message ----------------------------------------------

  inline ProtoNavMeshTriangle* New() const PROTOBUF_FINAL { return New(NULL); }

  ProtoNavMeshTriangle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProtoNavMeshTriangle& from);
  void MergeFrom(const ProtoNavMeshTriangle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProtoNavMeshTriangle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 a = 1;
  void clear_a();
  static const int kAFieldNumber = 1;
  ::google::protobuf::uint32 a() const;
  void set_a(::google::protobuf::uint32 value);

  // uint32 b = 2;
  void clear_b();
  static const int kBFieldNumber = 2;
  ::google::protobuf::uint32 b() const;
  void set_b(::google::protobuf::uint32 value);

  // uint32 c = 3;
  void clear_c();
  static const int kCFieldNumber = 3;
  ::google::protobuf::uint32 c() const;
  void set_c(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GDX.AI.ProtoNavMeshTriangle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 a_;
  ::google::protobuf::uint32 b_;
  ::google::protobuf::uint32 c_;
  mutable int _cached_size_;
  friend struct  protobuf_Protocol_2fNavMesh_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProtoRecastTile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GDX.AI.ProtoRecastTile) */ {
 public:
  ProtoRecastTile();
  virtual ~ProtoRecastTile();

  ProtoRecastTile(const ProtoRecastTile& from);

  inline ProtoRecastTile& operator=(const ProtoRecastTile& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoRecastTile& default_instance();

  static inline const ProtoRecastTile* internal_default_instance() {
    return reinterpret_cast<const ProtoRecastTile*>(
               &_ProtoRecastTile_default_instance_);
  }

  void Swap(ProtoRecastTile* other);

  // implements Message ----------------------------------------------

  inline ProtoRecastTile* New() const PROTOBUF_FINAL { return New(NULL); }

  ProtoRecastTile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProtoRecastTile& from);
  void MergeFrom(const ProtoRecastTile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProtoRecastTile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes tile_data = 2;
  void clear_tile_data();
  static const int kTileDataFieldNumber = 2;
  const ::std::string& tile_data() const;
  void set_tile_data(const ::std::string& value);
  #if LANG_CXX11
  void set_tile_data(::std::string&& value);
  #endif
  void set_tile_data(const char* value);
  void set_tile_data(const void* value, size_t size);
  ::std::string* mutable_tile_data();
  ::std::string* release_tile_data();
  void set_allocated_tile_data(::std::string* tile_data);

  // uint32 compressed_tile_ref = 1;
  void clear_compressed_tile_ref();
  static const int kCompressedTileRefFieldNumber = 1;
  ::google::protobuf::uint32 compressed_tile_ref() const;
  void set_compressed_tile_ref(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GDX.AI.ProtoRecastTile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tile_data_;
  ::google::protobuf::uint32 compressed_tile_ref_;
  mutable int _cached_size_;
  friend struct  protobuf_Protocol_2fNavMesh_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProtoRecastTiledNavMesh : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GDX.AI.ProtoRecastTiledNavMesh) */ {
 public:
  ProtoRecastTiledNavMesh();
  virtual ~ProtoRecastTiledNavMesh();

  ProtoRecastTiledNavMesh(const ProtoRecastTiledNavMesh& from);

  inline ProtoRecastTiledNavMesh& operator=(const ProtoRecastTiledNavMesh& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoRecastTiledNavMesh& default_instance();

  static inline const ProtoRecastTiledNavMesh* internal_default_instance() {
    return reinterpret_cast<const ProtoRecastTiledNavMesh*>(
               &_ProtoRecastTiledNavMesh_default_instance_);
  }

  void Swap(ProtoRecastTiledNavMesh* other);

  // implements Message ----------------------------------------------

  inline ProtoRecastTiledNavMesh* New() const PROTOBUF_FINAL { return New(NULL); }

  ProtoRecastTiledNavMesh* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProtoRecastTiledNavMesh& from);
  void MergeFrom(const ProtoRecastTiledNavMesh& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProtoRecastTiledNavMesh* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GDX.AI.ProtoRecastTile tiles = 10;
  int tiles_size() const;
  void clear_tiles();
  static const int kTilesFieldNumber = 10;
  const ::GDX::AI::ProtoRecastTile& tiles(int index) const;
  ::GDX::AI::ProtoRecastTile* mutable_tiles(int index);
  ::GDX::AI::ProtoRecastTile* add_tiles();
  ::google::protobuf::RepeatedPtrField< ::GDX::AI::ProtoRecastTile >*
      mutable_tiles();
  const ::google::protobuf::RepeatedPtrField< ::GDX::AI::ProtoRecastTile >&
      tiles() const;

  // bytes tile_cache_params = 2;
  void clear_tile_cache_params();
  static const int kTileCacheParamsFieldNumber = 2;
  const ::std::string& tile_cache_params() const;
  void set_tile_cache_params(const ::std::string& value);
  #if LANG_CXX11
  void set_tile_cache_params(::std::string&& value);
  #endif
  void set_tile_cache_params(const char* value);
  void set_tile_cache_params(const void* value, size_t size);
  ::std::string* mutable_tile_cache_params();
  ::std::string* release_tile_cache_params();
  void set_allocated_tile_cache_params(::std::string* tile_cache_params);

  // bytes nav_mesh_params = 3;
  void clear_nav_mesh_params();
  static const int kNavMeshParamsFieldNumber = 3;
  const ::std::string& nav_mesh_params() const;
  void set_nav_mesh_params(const ::std::string& value);
  #if LANG_CXX11
  void set_nav_mesh_params(::std::string&& value);
  #endif
  void set_nav_mesh_params(const char* value);
  void set_nav_mesh_params(const void* value, size_t size);
  ::std::string* mutable_nav_mesh_params();
  ::std::string* release_nav_mesh_params();
  void set_allocated_nav_mesh_params(::std::string* nav_mesh_params);

  // uint32 tile_count = 1;
  void clear_tile_count();
  static const int kTileCountFieldNumber = 1;
  ::google::protobuf::uint32 tile_count() const;
  void set_tile_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GDX.AI.ProtoRecastTiledNavMesh)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::GDX::AI::ProtoRecastTile > tiles_;
  ::google::protobuf::internal::ArenaStringPtr tile_cache_params_;
  ::google::protobuf::internal::ArenaStringPtr nav_mesh_params_;
  ::google::protobuf::uint32 tile_count_;
  mutable int _cached_size_;
  friend struct  protobuf_Protocol_2fNavMesh_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoNavMeshVector

// float x = 1;
inline void ProtoNavMeshVector::clear_x() {
  x_ = 0;
}
inline float ProtoNavMeshVector::x() const {
  // @@protoc_insertion_point(field_get:GDX.AI.ProtoNavMeshVector.x)
  return x_;
}
inline void ProtoNavMeshVector::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:GDX.AI.ProtoNavMeshVector.x)
}

// float y = 2;
inline void ProtoNavMeshVector::clear_y() {
  y_ = 0;
}
inline float ProtoNavMeshVector::y() const {
  // @@protoc_insertion_point(field_get:GDX.AI.ProtoNavMeshVector.y)
  return y_;
}
inline void ProtoNavMeshVector::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:GDX.AI.ProtoNavMeshVector.y)
}

// float z = 3;
inline void ProtoNavMeshVector::clear_z() {
  z_ = 0;
}
inline float ProtoNavMeshVector::z() const {
  // @@protoc_insertion_point(field_get:GDX.AI.ProtoNavMeshVector.z)
  return z_;
}
inline void ProtoNavMeshVector::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:GDX.AI.ProtoNavMeshVector.z)
}

// -------------------------------------------------------------------

// ProtoNavMeshTriangle

// uint32 a = 1;
inline void ProtoNavMeshTriangle::clear_a() {
  a_ = 0u;
}
inline ::google::protobuf::uint32 ProtoNavMeshTriangle::a() const {
  // @@protoc_insertion_point(field_get:GDX.AI.ProtoNavMeshTriangle.a)
  return a_;
}
inline void ProtoNavMeshTriangle::set_a(::google::protobuf::uint32 value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:GDX.AI.ProtoNavMeshTriangle.a)
}

// uint32 b = 2;
inline void ProtoNavMeshTriangle::clear_b() {
  b_ = 0u;
}
inline ::google::protobuf::uint32 ProtoNavMeshTriangle::b() const {
  // @@protoc_insertion_point(field_get:GDX.AI.ProtoNavMeshTriangle.b)
  return b_;
}
inline void ProtoNavMeshTriangle::set_b(::google::protobuf::uint32 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:GDX.AI.ProtoNavMeshTriangle.b)
}

// uint32 c = 3;
inline void ProtoNavMeshTriangle::clear_c() {
  c_ = 0u;
}
inline ::google::protobuf::uint32 ProtoNavMeshTriangle::c() const {
  // @@protoc_insertion_point(field_get:GDX.AI.ProtoNavMeshTriangle.c)
  return c_;
}
inline void ProtoNavMeshTriangle::set_c(::google::protobuf::uint32 value) {
  
  c_ = value;
  // @@protoc_insertion_point(field_set:GDX.AI.ProtoNavMeshTriangle.c)
}

// -------------------------------------------------------------------

// ProtoRecastTile

// uint32 compressed_tile_ref = 1;
inline void ProtoRecastTile::clear_compressed_tile_ref() {
  compressed_tile_ref_ = 0u;
}
inline ::google::protobuf::uint32 ProtoRecastTile::compressed_tile_ref() const {
  // @@protoc_insertion_point(field_get:GDX.AI.ProtoRecastTile.compressed_tile_ref)
  return compressed_tile_ref_;
}
inline void ProtoRecastTile::set_compressed_tile_ref(::google::protobuf::uint32 value) {
  
  compressed_tile_ref_ = value;
  // @@protoc_insertion_point(field_set:GDX.AI.ProtoRecastTile.compressed_tile_ref)
}

// bytes tile_data = 2;
inline void ProtoRecastTile::clear_tile_data() {
  tile_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProtoRecastTile::tile_data() const {
  // @@protoc_insertion_point(field_get:GDX.AI.ProtoRecastTile.tile_data)
  return tile_data_.GetNoArena();
}
inline void ProtoRecastTile::set_tile_data(const ::std::string& value) {
  
  tile_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GDX.AI.ProtoRecastTile.tile_data)
}
#if LANG_CXX11
inline void ProtoRecastTile::set_tile_data(::std::string&& value) {
  
  tile_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GDX.AI.ProtoRecastTile.tile_data)
}
#endif
inline void ProtoRecastTile::set_tile_data(const char* value) {
  
  tile_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GDX.AI.ProtoRecastTile.tile_data)
}
inline void ProtoRecastTile::set_tile_data(const void* value, size_t size) {
  
  tile_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GDX.AI.ProtoRecastTile.tile_data)
}
inline ::std::string* ProtoRecastTile::mutable_tile_data() {
  
  // @@protoc_insertion_point(field_mutable:GDX.AI.ProtoRecastTile.tile_data)
  return tile_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProtoRecastTile::release_tile_data() {
  // @@protoc_insertion_point(field_release:GDX.AI.ProtoRecastTile.tile_data)
  
  return tile_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoRecastTile::set_allocated_tile_data(::std::string* tile_data) {
  if (tile_data != NULL) {
    
  } else {
    
  }
  tile_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tile_data);
  // @@protoc_insertion_point(field_set_allocated:GDX.AI.ProtoRecastTile.tile_data)
}

// -------------------------------------------------------------------

// ProtoRecastTiledNavMesh

// uint32 tile_count = 1;
inline void ProtoRecastTiledNavMesh::clear_tile_count() {
  tile_count_ = 0u;
}
inline ::google::protobuf::uint32 ProtoRecastTiledNavMesh::tile_count() const {
  // @@protoc_insertion_point(field_get:GDX.AI.ProtoRecastTiledNavMesh.tile_count)
  return tile_count_;
}
inline void ProtoRecastTiledNavMesh::set_tile_count(::google::protobuf::uint32 value) {
  
  tile_count_ = value;
  // @@protoc_insertion_point(field_set:GDX.AI.ProtoRecastTiledNavMesh.tile_count)
}

// bytes tile_cache_params = 2;
inline void ProtoRecastTiledNavMesh::clear_tile_cache_params() {
  tile_cache_params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProtoRecastTiledNavMesh::tile_cache_params() const {
  // @@protoc_insertion_point(field_get:GDX.AI.ProtoRecastTiledNavMesh.tile_cache_params)
  return tile_cache_params_.GetNoArena();
}
inline void ProtoRecastTiledNavMesh::set_tile_cache_params(const ::std::string& value) {
  
  tile_cache_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GDX.AI.ProtoRecastTiledNavMesh.tile_cache_params)
}
#if LANG_CXX11
inline void ProtoRecastTiledNavMesh::set_tile_cache_params(::std::string&& value) {
  
  tile_cache_params_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GDX.AI.ProtoRecastTiledNavMesh.tile_cache_params)
}
#endif
inline void ProtoRecastTiledNavMesh::set_tile_cache_params(const char* value) {
  
  tile_cache_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GDX.AI.ProtoRecastTiledNavMesh.tile_cache_params)
}
inline void ProtoRecastTiledNavMesh::set_tile_cache_params(const void* value, size_t size) {
  
  tile_cache_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GDX.AI.ProtoRecastTiledNavMesh.tile_cache_params)
}
inline ::std::string* ProtoRecastTiledNavMesh::mutable_tile_cache_params() {
  
  // @@protoc_insertion_point(field_mutable:GDX.AI.ProtoRecastTiledNavMesh.tile_cache_params)
  return tile_cache_params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProtoRecastTiledNavMesh::release_tile_cache_params() {
  // @@protoc_insertion_point(field_release:GDX.AI.ProtoRecastTiledNavMesh.tile_cache_params)
  
  return tile_cache_params_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoRecastTiledNavMesh::set_allocated_tile_cache_params(::std::string* tile_cache_params) {
  if (tile_cache_params != NULL) {
    
  } else {
    
  }
  tile_cache_params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tile_cache_params);
  // @@protoc_insertion_point(field_set_allocated:GDX.AI.ProtoRecastTiledNavMesh.tile_cache_params)
}

// bytes nav_mesh_params = 3;
inline void ProtoRecastTiledNavMesh::clear_nav_mesh_params() {
  nav_mesh_params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProtoRecastTiledNavMesh::nav_mesh_params() const {
  // @@protoc_insertion_point(field_get:GDX.AI.ProtoRecastTiledNavMesh.nav_mesh_params)
  return nav_mesh_params_.GetNoArena();
}
inline void ProtoRecastTiledNavMesh::set_nav_mesh_params(const ::std::string& value) {
  
  nav_mesh_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GDX.AI.ProtoRecastTiledNavMesh.nav_mesh_params)
}
#if LANG_CXX11
inline void ProtoRecastTiledNavMesh::set_nav_mesh_params(::std::string&& value) {
  
  nav_mesh_params_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GDX.AI.ProtoRecastTiledNavMesh.nav_mesh_params)
}
#endif
inline void ProtoRecastTiledNavMesh::set_nav_mesh_params(const char* value) {
  
  nav_mesh_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GDX.AI.ProtoRecastTiledNavMesh.nav_mesh_params)
}
inline void ProtoRecastTiledNavMesh::set_nav_mesh_params(const void* value, size_t size) {
  
  nav_mesh_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GDX.AI.ProtoRecastTiledNavMesh.nav_mesh_params)
}
inline ::std::string* ProtoRecastTiledNavMesh::mutable_nav_mesh_params() {
  
  // @@protoc_insertion_point(field_mutable:GDX.AI.ProtoRecastTiledNavMesh.nav_mesh_params)
  return nav_mesh_params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProtoRecastTiledNavMesh::release_nav_mesh_params() {
  // @@protoc_insertion_point(field_release:GDX.AI.ProtoRecastTiledNavMesh.nav_mesh_params)
  
  return nav_mesh_params_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoRecastTiledNavMesh::set_allocated_nav_mesh_params(::std::string* nav_mesh_params) {
  if (nav_mesh_params != NULL) {
    
  } else {
    
  }
  nav_mesh_params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nav_mesh_params);
  // @@protoc_insertion_point(field_set_allocated:GDX.AI.ProtoRecastTiledNavMesh.nav_mesh_params)
}

// repeated .GDX.AI.ProtoRecastTile tiles = 10;
inline int ProtoRecastTiledNavMesh::tiles_size() const {
  return tiles_.size();
}
inline void ProtoRecastTiledNavMesh::clear_tiles() {
  tiles_.Clear();
}
inline const ::GDX::AI::ProtoRecastTile& ProtoRecastTiledNavMesh::tiles(int index) const {
  // @@protoc_insertion_point(field_get:GDX.AI.ProtoRecastTiledNavMesh.tiles)
  return tiles_.Get(index);
}
inline ::GDX::AI::ProtoRecastTile* ProtoRecastTiledNavMesh::mutable_tiles(int index) {
  // @@protoc_insertion_point(field_mutable:GDX.AI.ProtoRecastTiledNavMesh.tiles)
  return tiles_.Mutable(index);
}
inline ::GDX::AI::ProtoRecastTile* ProtoRecastTiledNavMesh::add_tiles() {
  // @@protoc_insertion_point(field_add:GDX.AI.ProtoRecastTiledNavMesh.tiles)
  return tiles_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::GDX::AI::ProtoRecastTile >*
ProtoRecastTiledNavMesh::mutable_tiles() {
  // @@protoc_insertion_point(field_mutable_list:GDX.AI.ProtoRecastTiledNavMesh.tiles)
  return &tiles_;
}
inline const ::google::protobuf::RepeatedPtrField< ::GDX::AI::ProtoRecastTile >&
ProtoRecastTiledNavMesh::tiles() const {
  // @@protoc_insertion_point(field_list:GDX.AI.ProtoRecastTiledNavMesh.tiles)
  return tiles_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace AI
}  // namespace GDX

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Protocol_2fNavMesh_2eproto__INCLUDED
