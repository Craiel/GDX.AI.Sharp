// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol/NavMesh.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NavMesh.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GDX {
namespace AI {
class ProtoNavMeshVectorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtoNavMeshVector> {
} _ProtoNavMeshVector_default_instance_;
class ProtoNavMeshTriangleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtoNavMeshTriangle> {
} _ProtoNavMeshTriangle_default_instance_;
class ProtoRecastTileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtoRecastTile> {
} _ProtoRecastTile_default_instance_;
class ProtoRecastTiledNavMeshDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtoRecastTiledNavMesh> {
} _ProtoRecastTiledNavMesh_default_instance_;

namespace protobuf_Protocol_2fNavMesh_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNavMeshVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNavMeshVector, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNavMeshVector, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNavMeshVector, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNavMeshTriangle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNavMeshTriangle, a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNavMeshTriangle, b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNavMeshTriangle, c_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRecastTile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRecastTile, compressed_tile_ref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRecastTile, tile_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRecastTiledNavMesh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRecastTiledNavMesh, tile_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRecastTiledNavMesh, tile_cache_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRecastTiledNavMesh, nav_mesh_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRecastTiledNavMesh, tiles_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(ProtoNavMeshVector)},
  { 7, -1, sizeof(ProtoNavMeshTriangle)},
  { 14, -1, sizeof(ProtoRecastTile)},
  { 20, -1, sizeof(ProtoRecastTiledNavMesh)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtoNavMeshVector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtoNavMeshTriangle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtoRecastTile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtoRecastTiledNavMesh_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Protocol/NavMesh.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _ProtoNavMeshVector_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ProtoNavMeshTriangle_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ProtoRecastTile_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ProtoRecastTiledNavMesh_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ProtoNavMeshVector_default_instance_.DefaultConstruct();
  _ProtoNavMeshTriangle_default_instance_.DefaultConstruct();
  _ProtoRecastTile_default_instance_.DefaultConstruct();
  _ProtoRecastTiledNavMesh_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\026Protocol/NavMesh.proto\022\006GDX.AI\"5\n\022Prot"
      "oNavMeshVector\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001"
      "z\030\003 \001(\002\"7\n\024ProtoNavMeshTriangle\022\t\n\001a\030\001 \001"
      "(\r\022\t\n\001b\030\002 \001(\r\022\t\n\001c\030\003 \001(\r\"A\n\017ProtoRecastT"
      "ile\022\033\n\023compressed_tile_ref\030\001 \001(\r\022\021\n\ttile"
      "_data\030\002 \001(\014\"\211\001\n\027ProtoRecastTiledNavMesh\022"
      "\022\n\ntile_count\030\001 \001(\r\022\031\n\021tile_cache_params"
      "\030\002 \001(\014\022\027\n\017nav_mesh_params\030\003 \001(\014\022&\n\005tiles"
      "\030\n \003(\0132\027.GDX.AI.ProtoRecastTileB\031\252\002\026GDX."
      "AI.Recast.Protocolb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 386);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Protocol/NavMesh.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_Protocol_2fNavMesh_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoNavMeshVector::kXFieldNumber;
const int ProtoNavMeshVector::kYFieldNumber;
const int ProtoNavMeshVector::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoNavMeshVector::ProtoNavMeshVector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2fNavMesh_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GDX.AI.ProtoNavMeshVector)
}
ProtoNavMeshVector::ProtoNavMeshVector(const ProtoNavMeshVector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:GDX.AI.ProtoNavMeshVector)
}

void ProtoNavMeshVector::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  _cached_size_ = 0;
}

ProtoNavMeshVector::~ProtoNavMeshVector() {
  // @@protoc_insertion_point(destructor:GDX.AI.ProtoNavMeshVector)
  SharedDtor();
}

void ProtoNavMeshVector::SharedDtor() {
}

void ProtoNavMeshVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoNavMeshVector::descriptor() {
  protobuf_Protocol_2fNavMesh_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2fNavMesh_2eproto::file_level_metadata[0].descriptor;
}

const ProtoNavMeshVector& ProtoNavMeshVector::default_instance() {
  protobuf_Protocol_2fNavMesh_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtoNavMeshVector* ProtoNavMeshVector::New(::google::protobuf::Arena* arena) const {
  ProtoNavMeshVector* n = new ProtoNavMeshVector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoNavMeshVector::Clear() {
// @@protoc_insertion_point(message_clear_start:GDX.AI.ProtoNavMeshVector)
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
}

bool ProtoNavMeshVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GDX.AI.ProtoNavMeshVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (tag == 13u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GDX.AI.ProtoNavMeshVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GDX.AI.ProtoNavMeshVector)
  return false;
#undef DO_
}

void ProtoNavMeshVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GDX.AI.ProtoNavMeshVector)
  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:GDX.AI.ProtoNavMeshVector)
}

::google::protobuf::uint8* ProtoNavMeshVector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GDX.AI.ProtoNavMeshVector)
  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GDX.AI.ProtoNavMeshVector)
  return target;
}

size_t ProtoNavMeshVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GDX.AI.ProtoNavMeshVector)
  size_t total_size = 0;

  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoNavMeshVector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GDX.AI.ProtoNavMeshVector)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoNavMeshVector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoNavMeshVector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GDX.AI.ProtoNavMeshVector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GDX.AI.ProtoNavMeshVector)
    MergeFrom(*source);
  }
}

void ProtoNavMeshVector::MergeFrom(const ProtoNavMeshVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GDX.AI.ProtoNavMeshVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void ProtoNavMeshVector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GDX.AI.ProtoNavMeshVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoNavMeshVector::CopyFrom(const ProtoNavMeshVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GDX.AI.ProtoNavMeshVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoNavMeshVector::IsInitialized() const {
  return true;
}

void ProtoNavMeshVector::Swap(ProtoNavMeshVector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoNavMeshVector::InternalSwap(ProtoNavMeshVector* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoNavMeshVector::GetMetadata() const {
  protobuf_Protocol_2fNavMesh_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2fNavMesh_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoNavMeshVector

// float x = 1;
void ProtoNavMeshVector::clear_x() {
  x_ = 0;
}
float ProtoNavMeshVector::x() const {
  // @@protoc_insertion_point(field_get:GDX.AI.ProtoNavMeshVector.x)
  return x_;
}
void ProtoNavMeshVector::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:GDX.AI.ProtoNavMeshVector.x)
}

// float y = 2;
void ProtoNavMeshVector::clear_y() {
  y_ = 0;
}
float ProtoNavMeshVector::y() const {
  // @@protoc_insertion_point(field_get:GDX.AI.ProtoNavMeshVector.y)
  return y_;
}
void ProtoNavMeshVector::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:GDX.AI.ProtoNavMeshVector.y)
}

// float z = 3;
void ProtoNavMeshVector::clear_z() {
  z_ = 0;
}
float ProtoNavMeshVector::z() const {
  // @@protoc_insertion_point(field_get:GDX.AI.ProtoNavMeshVector.z)
  return z_;
}
void ProtoNavMeshVector::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:GDX.AI.ProtoNavMeshVector.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoNavMeshTriangle::kAFieldNumber;
const int ProtoNavMeshTriangle::kBFieldNumber;
const int ProtoNavMeshTriangle::kCFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoNavMeshTriangle::ProtoNavMeshTriangle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2fNavMesh_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GDX.AI.ProtoNavMeshTriangle)
}
ProtoNavMeshTriangle::ProtoNavMeshTriangle(const ProtoNavMeshTriangle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&a_, &from.a_,
    reinterpret_cast<char*>(&c_) -
    reinterpret_cast<char*>(&a_) + sizeof(c_));
  // @@protoc_insertion_point(copy_constructor:GDX.AI.ProtoNavMeshTriangle)
}

void ProtoNavMeshTriangle::SharedCtor() {
  ::memset(&a_, 0, reinterpret_cast<char*>(&c_) -
    reinterpret_cast<char*>(&a_) + sizeof(c_));
  _cached_size_ = 0;
}

ProtoNavMeshTriangle::~ProtoNavMeshTriangle() {
  // @@protoc_insertion_point(destructor:GDX.AI.ProtoNavMeshTriangle)
  SharedDtor();
}

void ProtoNavMeshTriangle::SharedDtor() {
}

void ProtoNavMeshTriangle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoNavMeshTriangle::descriptor() {
  protobuf_Protocol_2fNavMesh_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2fNavMesh_2eproto::file_level_metadata[1].descriptor;
}

const ProtoNavMeshTriangle& ProtoNavMeshTriangle::default_instance() {
  protobuf_Protocol_2fNavMesh_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtoNavMeshTriangle* ProtoNavMeshTriangle::New(::google::protobuf::Arena* arena) const {
  ProtoNavMeshTriangle* n = new ProtoNavMeshTriangle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoNavMeshTriangle::Clear() {
// @@protoc_insertion_point(message_clear_start:GDX.AI.ProtoNavMeshTriangle)
  ::memset(&a_, 0, reinterpret_cast<char*>(&c_) -
    reinterpret_cast<char*>(&a_) + sizeof(c_));
}

bool ProtoNavMeshTriangle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GDX.AI.ProtoNavMeshTriangle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 a = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 b = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 c = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GDX.AI.ProtoNavMeshTriangle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GDX.AI.ProtoNavMeshTriangle)
  return false;
#undef DO_
}

void ProtoNavMeshTriangle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GDX.AI.ProtoNavMeshTriangle)
  // uint32 a = 1;
  if (this->a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->a(), output);
  }

  // uint32 b = 2;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->b(), output);
  }

  // uint32 c = 3;
  if (this->c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->c(), output);
  }

  // @@protoc_insertion_point(serialize_end:GDX.AI.ProtoNavMeshTriangle)
}

::google::protobuf::uint8* ProtoNavMeshTriangle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GDX.AI.ProtoNavMeshTriangle)
  // uint32 a = 1;
  if (this->a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->a(), target);
  }

  // uint32 b = 2;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->b(), target);
  }

  // uint32 c = 3;
  if (this->c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->c(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GDX.AI.ProtoNavMeshTriangle)
  return target;
}

size_t ProtoNavMeshTriangle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GDX.AI.ProtoNavMeshTriangle)
  size_t total_size = 0;

  // uint32 a = 1;
  if (this->a() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->a());
  }

  // uint32 b = 2;
  if (this->b() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->b());
  }

  // uint32 c = 3;
  if (this->c() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->c());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoNavMeshTriangle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GDX.AI.ProtoNavMeshTriangle)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoNavMeshTriangle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoNavMeshTriangle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GDX.AI.ProtoNavMeshTriangle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GDX.AI.ProtoNavMeshTriangle)
    MergeFrom(*source);
  }
}

void ProtoNavMeshTriangle::MergeFrom(const ProtoNavMeshTriangle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GDX.AI.ProtoNavMeshTriangle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.a() != 0) {
    set_a(from.a());
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
  if (from.c() != 0) {
    set_c(from.c());
  }
}

void ProtoNavMeshTriangle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GDX.AI.ProtoNavMeshTriangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoNavMeshTriangle::CopyFrom(const ProtoNavMeshTriangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GDX.AI.ProtoNavMeshTriangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoNavMeshTriangle::IsInitialized() const {
  return true;
}

void ProtoNavMeshTriangle::Swap(ProtoNavMeshTriangle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoNavMeshTriangle::InternalSwap(ProtoNavMeshTriangle* other) {
  std::swap(a_, other->a_);
  std::swap(b_, other->b_);
  std::swap(c_, other->c_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoNavMeshTriangle::GetMetadata() const {
  protobuf_Protocol_2fNavMesh_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2fNavMesh_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoNavMeshTriangle

// uint32 a = 1;
void ProtoNavMeshTriangle::clear_a() {
  a_ = 0u;
}
::google::protobuf::uint32 ProtoNavMeshTriangle::a() const {
  // @@protoc_insertion_point(field_get:GDX.AI.ProtoNavMeshTriangle.a)
  return a_;
}
void ProtoNavMeshTriangle::set_a(::google::protobuf::uint32 value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:GDX.AI.ProtoNavMeshTriangle.a)
}

// uint32 b = 2;
void ProtoNavMeshTriangle::clear_b() {
  b_ = 0u;
}
::google::protobuf::uint32 ProtoNavMeshTriangle::b() const {
  // @@protoc_insertion_point(field_get:GDX.AI.ProtoNavMeshTriangle.b)
  return b_;
}
void ProtoNavMeshTriangle::set_b(::google::protobuf::uint32 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:GDX.AI.ProtoNavMeshTriangle.b)
}

// uint32 c = 3;
void ProtoNavMeshTriangle::clear_c() {
  c_ = 0u;
}
::google::protobuf::uint32 ProtoNavMeshTriangle::c() const {
  // @@protoc_insertion_point(field_get:GDX.AI.ProtoNavMeshTriangle.c)
  return c_;
}
void ProtoNavMeshTriangle::set_c(::google::protobuf::uint32 value) {
  
  c_ = value;
  // @@protoc_insertion_point(field_set:GDX.AI.ProtoNavMeshTriangle.c)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoRecastTile::kCompressedTileRefFieldNumber;
const int ProtoRecastTile::kTileDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoRecastTile::ProtoRecastTile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2fNavMesh_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GDX.AI.ProtoRecastTile)
}
ProtoRecastTile::ProtoRecastTile(const ProtoRecastTile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tile_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tile_data().size() > 0) {
    tile_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tile_data_);
  }
  compressed_tile_ref_ = from.compressed_tile_ref_;
  // @@protoc_insertion_point(copy_constructor:GDX.AI.ProtoRecastTile)
}

void ProtoRecastTile::SharedCtor() {
  tile_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  compressed_tile_ref_ = 0u;
  _cached_size_ = 0;
}

ProtoRecastTile::~ProtoRecastTile() {
  // @@protoc_insertion_point(destructor:GDX.AI.ProtoRecastTile)
  SharedDtor();
}

void ProtoRecastTile::SharedDtor() {
  tile_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProtoRecastTile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRecastTile::descriptor() {
  protobuf_Protocol_2fNavMesh_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2fNavMesh_2eproto::file_level_metadata[2].descriptor;
}

const ProtoRecastTile& ProtoRecastTile::default_instance() {
  protobuf_Protocol_2fNavMesh_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtoRecastTile* ProtoRecastTile::New(::google::protobuf::Arena* arena) const {
  ProtoRecastTile* n = new ProtoRecastTile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoRecastTile::Clear() {
// @@protoc_insertion_point(message_clear_start:GDX.AI.ProtoRecastTile)
  tile_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  compressed_tile_ref_ = 0u;
}

bool ProtoRecastTile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GDX.AI.ProtoRecastTile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 compressed_tile_ref = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compressed_tile_ref_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes tile_data = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tile_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GDX.AI.ProtoRecastTile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GDX.AI.ProtoRecastTile)
  return false;
#undef DO_
}

void ProtoRecastTile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GDX.AI.ProtoRecastTile)
  // uint32 compressed_tile_ref = 1;
  if (this->compressed_tile_ref() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->compressed_tile_ref(), output);
  }

  // bytes tile_data = 2;
  if (this->tile_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->tile_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:GDX.AI.ProtoRecastTile)
}

::google::protobuf::uint8* ProtoRecastTile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GDX.AI.ProtoRecastTile)
  // uint32 compressed_tile_ref = 1;
  if (this->compressed_tile_ref() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->compressed_tile_ref(), target);
  }

  // bytes tile_data = 2;
  if (this->tile_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->tile_data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GDX.AI.ProtoRecastTile)
  return target;
}

size_t ProtoRecastTile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GDX.AI.ProtoRecastTile)
  size_t total_size = 0;

  // bytes tile_data = 2;
  if (this->tile_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tile_data());
  }

  // uint32 compressed_tile_ref = 1;
  if (this->compressed_tile_ref() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->compressed_tile_ref());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRecastTile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GDX.AI.ProtoRecastTile)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoRecastTile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoRecastTile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GDX.AI.ProtoRecastTile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GDX.AI.ProtoRecastTile)
    MergeFrom(*source);
  }
}

void ProtoRecastTile::MergeFrom(const ProtoRecastTile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GDX.AI.ProtoRecastTile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.tile_data().size() > 0) {

    tile_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tile_data_);
  }
  if (from.compressed_tile_ref() != 0) {
    set_compressed_tile_ref(from.compressed_tile_ref());
  }
}

void ProtoRecastTile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GDX.AI.ProtoRecastTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRecastTile::CopyFrom(const ProtoRecastTile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GDX.AI.ProtoRecastTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRecastTile::IsInitialized() const {
  return true;
}

void ProtoRecastTile::Swap(ProtoRecastTile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoRecastTile::InternalSwap(ProtoRecastTile* other) {
  tile_data_.Swap(&other->tile_data_);
  std::swap(compressed_tile_ref_, other->compressed_tile_ref_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoRecastTile::GetMetadata() const {
  protobuf_Protocol_2fNavMesh_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2fNavMesh_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoRecastTile

// uint32 compressed_tile_ref = 1;
void ProtoRecastTile::clear_compressed_tile_ref() {
  compressed_tile_ref_ = 0u;
}
::google::protobuf::uint32 ProtoRecastTile::compressed_tile_ref() const {
  // @@protoc_insertion_point(field_get:GDX.AI.ProtoRecastTile.compressed_tile_ref)
  return compressed_tile_ref_;
}
void ProtoRecastTile::set_compressed_tile_ref(::google::protobuf::uint32 value) {
  
  compressed_tile_ref_ = value;
  // @@protoc_insertion_point(field_set:GDX.AI.ProtoRecastTile.compressed_tile_ref)
}

// bytes tile_data = 2;
void ProtoRecastTile::clear_tile_data() {
  tile_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProtoRecastTile::tile_data() const {
  // @@protoc_insertion_point(field_get:GDX.AI.ProtoRecastTile.tile_data)
  return tile_data_.GetNoArena();
}
void ProtoRecastTile::set_tile_data(const ::std::string& value) {
  
  tile_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GDX.AI.ProtoRecastTile.tile_data)
}
#if LANG_CXX11
void ProtoRecastTile::set_tile_data(::std::string&& value) {
  
  tile_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GDX.AI.ProtoRecastTile.tile_data)
}
#endif
void ProtoRecastTile::set_tile_data(const char* value) {
  
  tile_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GDX.AI.ProtoRecastTile.tile_data)
}
void ProtoRecastTile::set_tile_data(const void* value, size_t size) {
  
  tile_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GDX.AI.ProtoRecastTile.tile_data)
}
::std::string* ProtoRecastTile::mutable_tile_data() {
  
  // @@protoc_insertion_point(field_mutable:GDX.AI.ProtoRecastTile.tile_data)
  return tile_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProtoRecastTile::release_tile_data() {
  // @@protoc_insertion_point(field_release:GDX.AI.ProtoRecastTile.tile_data)
  
  return tile_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProtoRecastTile::set_allocated_tile_data(::std::string* tile_data) {
  if (tile_data != NULL) {
    
  } else {
    
  }
  tile_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tile_data);
  // @@protoc_insertion_point(field_set_allocated:GDX.AI.ProtoRecastTile.tile_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoRecastTiledNavMesh::kTileCountFieldNumber;
const int ProtoRecastTiledNavMesh::kTileCacheParamsFieldNumber;
const int ProtoRecastTiledNavMesh::kNavMeshParamsFieldNumber;
const int ProtoRecastTiledNavMesh::kTilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoRecastTiledNavMesh::ProtoRecastTiledNavMesh()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Protocol_2fNavMesh_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GDX.AI.ProtoRecastTiledNavMesh)
}
ProtoRecastTiledNavMesh::ProtoRecastTiledNavMesh(const ProtoRecastTiledNavMesh& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tiles_(from.tiles_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tile_cache_params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tile_cache_params().size() > 0) {
    tile_cache_params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tile_cache_params_);
  }
  nav_mesh_params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nav_mesh_params().size() > 0) {
    nav_mesh_params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nav_mesh_params_);
  }
  tile_count_ = from.tile_count_;
  // @@protoc_insertion_point(copy_constructor:GDX.AI.ProtoRecastTiledNavMesh)
}

void ProtoRecastTiledNavMesh::SharedCtor() {
  tile_cache_params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nav_mesh_params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tile_count_ = 0u;
  _cached_size_ = 0;
}

ProtoRecastTiledNavMesh::~ProtoRecastTiledNavMesh() {
  // @@protoc_insertion_point(destructor:GDX.AI.ProtoRecastTiledNavMesh)
  SharedDtor();
}

void ProtoRecastTiledNavMesh::SharedDtor() {
  tile_cache_params_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nav_mesh_params_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProtoRecastTiledNavMesh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRecastTiledNavMesh::descriptor() {
  protobuf_Protocol_2fNavMesh_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2fNavMesh_2eproto::file_level_metadata[3].descriptor;
}

const ProtoRecastTiledNavMesh& ProtoRecastTiledNavMesh::default_instance() {
  protobuf_Protocol_2fNavMesh_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtoRecastTiledNavMesh* ProtoRecastTiledNavMesh::New(::google::protobuf::Arena* arena) const {
  ProtoRecastTiledNavMesh* n = new ProtoRecastTiledNavMesh;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoRecastTiledNavMesh::Clear() {
// @@protoc_insertion_point(message_clear_start:GDX.AI.ProtoRecastTiledNavMesh)
  tiles_.Clear();
  tile_cache_params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nav_mesh_params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tile_count_ = 0u;
}

bool ProtoRecastTiledNavMesh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GDX.AI.ProtoRecastTiledNavMesh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 tile_count = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tile_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes tile_cache_params = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tile_cache_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes nav_mesh_params = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nav_mesh_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GDX.AI.ProtoRecastTile tiles = 10;
      case 10: {
        if (tag == 82u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tiles()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GDX.AI.ProtoRecastTiledNavMesh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GDX.AI.ProtoRecastTiledNavMesh)
  return false;
#undef DO_
}

void ProtoRecastTiledNavMesh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GDX.AI.ProtoRecastTiledNavMesh)
  // uint32 tile_count = 1;
  if (this->tile_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tile_count(), output);
  }

  // bytes tile_cache_params = 2;
  if (this->tile_cache_params().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->tile_cache_params(), output);
  }

  // bytes nav_mesh_params = 3;
  if (this->nav_mesh_params().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->nav_mesh_params(), output);
  }

  // repeated .GDX.AI.ProtoRecastTile tiles = 10;
  for (unsigned int i = 0, n = this->tiles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->tiles(i), output);
  }

  // @@protoc_insertion_point(serialize_end:GDX.AI.ProtoRecastTiledNavMesh)
}

::google::protobuf::uint8* ProtoRecastTiledNavMesh::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GDX.AI.ProtoRecastTiledNavMesh)
  // uint32 tile_count = 1;
  if (this->tile_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tile_count(), target);
  }

  // bytes tile_cache_params = 2;
  if (this->tile_cache_params().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->tile_cache_params(), target);
  }

  // bytes nav_mesh_params = 3;
  if (this->nav_mesh_params().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->nav_mesh_params(), target);
  }

  // repeated .GDX.AI.ProtoRecastTile tiles = 10;
  for (unsigned int i = 0, n = this->tiles_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->tiles(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GDX.AI.ProtoRecastTiledNavMesh)
  return target;
}

size_t ProtoRecastTiledNavMesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GDX.AI.ProtoRecastTiledNavMesh)
  size_t total_size = 0;

  // repeated .GDX.AI.ProtoRecastTile tiles = 10;
  {
    unsigned int count = this->tiles_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tiles(i));
    }
  }

  // bytes tile_cache_params = 2;
  if (this->tile_cache_params().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tile_cache_params());
  }

  // bytes nav_mesh_params = 3;
  if (this->nav_mesh_params().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nav_mesh_params());
  }

  // uint32 tile_count = 1;
  if (this->tile_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tile_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRecastTiledNavMesh::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GDX.AI.ProtoRecastTiledNavMesh)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoRecastTiledNavMesh* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoRecastTiledNavMesh>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GDX.AI.ProtoRecastTiledNavMesh)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GDX.AI.ProtoRecastTiledNavMesh)
    MergeFrom(*source);
  }
}

void ProtoRecastTiledNavMesh::MergeFrom(const ProtoRecastTiledNavMesh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GDX.AI.ProtoRecastTiledNavMesh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tiles_.MergeFrom(from.tiles_);
  if (from.tile_cache_params().size() > 0) {

    tile_cache_params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tile_cache_params_);
  }
  if (from.nav_mesh_params().size() > 0) {

    nav_mesh_params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nav_mesh_params_);
  }
  if (from.tile_count() != 0) {
    set_tile_count(from.tile_count());
  }
}

void ProtoRecastTiledNavMesh::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GDX.AI.ProtoRecastTiledNavMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRecastTiledNavMesh::CopyFrom(const ProtoRecastTiledNavMesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GDX.AI.ProtoRecastTiledNavMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRecastTiledNavMesh::IsInitialized() const {
  return true;
}

void ProtoRecastTiledNavMesh::Swap(ProtoRecastTiledNavMesh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoRecastTiledNavMesh::InternalSwap(ProtoRecastTiledNavMesh* other) {
  tiles_.UnsafeArenaSwap(&other->tiles_);
  tile_cache_params_.Swap(&other->tile_cache_params_);
  nav_mesh_params_.Swap(&other->nav_mesh_params_);
  std::swap(tile_count_, other->tile_count_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoRecastTiledNavMesh::GetMetadata() const {
  protobuf_Protocol_2fNavMesh_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocol_2fNavMesh_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoRecastTiledNavMesh

// uint32 tile_count = 1;
void ProtoRecastTiledNavMesh::clear_tile_count() {
  tile_count_ = 0u;
}
::google::protobuf::uint32 ProtoRecastTiledNavMesh::tile_count() const {
  // @@protoc_insertion_point(field_get:GDX.AI.ProtoRecastTiledNavMesh.tile_count)
  return tile_count_;
}
void ProtoRecastTiledNavMesh::set_tile_count(::google::protobuf::uint32 value) {
  
  tile_count_ = value;
  // @@protoc_insertion_point(field_set:GDX.AI.ProtoRecastTiledNavMesh.tile_count)
}

// bytes tile_cache_params = 2;
void ProtoRecastTiledNavMesh::clear_tile_cache_params() {
  tile_cache_params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProtoRecastTiledNavMesh::tile_cache_params() const {
  // @@protoc_insertion_point(field_get:GDX.AI.ProtoRecastTiledNavMesh.tile_cache_params)
  return tile_cache_params_.GetNoArena();
}
void ProtoRecastTiledNavMesh::set_tile_cache_params(const ::std::string& value) {
  
  tile_cache_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GDX.AI.ProtoRecastTiledNavMesh.tile_cache_params)
}
#if LANG_CXX11
void ProtoRecastTiledNavMesh::set_tile_cache_params(::std::string&& value) {
  
  tile_cache_params_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GDX.AI.ProtoRecastTiledNavMesh.tile_cache_params)
}
#endif
void ProtoRecastTiledNavMesh::set_tile_cache_params(const char* value) {
  
  tile_cache_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GDX.AI.ProtoRecastTiledNavMesh.tile_cache_params)
}
void ProtoRecastTiledNavMesh::set_tile_cache_params(const void* value, size_t size) {
  
  tile_cache_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GDX.AI.ProtoRecastTiledNavMesh.tile_cache_params)
}
::std::string* ProtoRecastTiledNavMesh::mutable_tile_cache_params() {
  
  // @@protoc_insertion_point(field_mutable:GDX.AI.ProtoRecastTiledNavMesh.tile_cache_params)
  return tile_cache_params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProtoRecastTiledNavMesh::release_tile_cache_params() {
  // @@protoc_insertion_point(field_release:GDX.AI.ProtoRecastTiledNavMesh.tile_cache_params)
  
  return tile_cache_params_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProtoRecastTiledNavMesh::set_allocated_tile_cache_params(::std::string* tile_cache_params) {
  if (tile_cache_params != NULL) {
    
  } else {
    
  }
  tile_cache_params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tile_cache_params);
  // @@protoc_insertion_point(field_set_allocated:GDX.AI.ProtoRecastTiledNavMesh.tile_cache_params)
}

// bytes nav_mesh_params = 3;
void ProtoRecastTiledNavMesh::clear_nav_mesh_params() {
  nav_mesh_params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProtoRecastTiledNavMesh::nav_mesh_params() const {
  // @@protoc_insertion_point(field_get:GDX.AI.ProtoRecastTiledNavMesh.nav_mesh_params)
  return nav_mesh_params_.GetNoArena();
}
void ProtoRecastTiledNavMesh::set_nav_mesh_params(const ::std::string& value) {
  
  nav_mesh_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GDX.AI.ProtoRecastTiledNavMesh.nav_mesh_params)
}
#if LANG_CXX11
void ProtoRecastTiledNavMesh::set_nav_mesh_params(::std::string&& value) {
  
  nav_mesh_params_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GDX.AI.ProtoRecastTiledNavMesh.nav_mesh_params)
}
#endif
void ProtoRecastTiledNavMesh::set_nav_mesh_params(const char* value) {
  
  nav_mesh_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GDX.AI.ProtoRecastTiledNavMesh.nav_mesh_params)
}
void ProtoRecastTiledNavMesh::set_nav_mesh_params(const void* value, size_t size) {
  
  nav_mesh_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GDX.AI.ProtoRecastTiledNavMesh.nav_mesh_params)
}
::std::string* ProtoRecastTiledNavMesh::mutable_nav_mesh_params() {
  
  // @@protoc_insertion_point(field_mutable:GDX.AI.ProtoRecastTiledNavMesh.nav_mesh_params)
  return nav_mesh_params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProtoRecastTiledNavMesh::release_nav_mesh_params() {
  // @@protoc_insertion_point(field_release:GDX.AI.ProtoRecastTiledNavMesh.nav_mesh_params)
  
  return nav_mesh_params_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProtoRecastTiledNavMesh::set_allocated_nav_mesh_params(::std::string* nav_mesh_params) {
  if (nav_mesh_params != NULL) {
    
  } else {
    
  }
  nav_mesh_params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nav_mesh_params);
  // @@protoc_insertion_point(field_set_allocated:GDX.AI.ProtoRecastTiledNavMesh.nav_mesh_params)
}

// repeated .GDX.AI.ProtoRecastTile tiles = 10;
int ProtoRecastTiledNavMesh::tiles_size() const {
  return tiles_.size();
}
void ProtoRecastTiledNavMesh::clear_tiles() {
  tiles_.Clear();
}
const ::GDX::AI::ProtoRecastTile& ProtoRecastTiledNavMesh::tiles(int index) const {
  // @@protoc_insertion_point(field_get:GDX.AI.ProtoRecastTiledNavMesh.tiles)
  return tiles_.Get(index);
}
::GDX::AI::ProtoRecastTile* ProtoRecastTiledNavMesh::mutable_tiles(int index) {
  // @@protoc_insertion_point(field_mutable:GDX.AI.ProtoRecastTiledNavMesh.tiles)
  return tiles_.Mutable(index);
}
::GDX::AI::ProtoRecastTile* ProtoRecastTiledNavMesh::add_tiles() {
  // @@protoc_insertion_point(field_add:GDX.AI.ProtoRecastTiledNavMesh.tiles)
  return tiles_.Add();
}
::google::protobuf::RepeatedPtrField< ::GDX::AI::ProtoRecastTile >*
ProtoRecastTiledNavMesh::mutable_tiles() {
  // @@protoc_insertion_point(field_mutable_list:GDX.AI.ProtoRecastTiledNavMesh.tiles)
  return &tiles_;
}
const ::google::protobuf::RepeatedPtrField< ::GDX::AI::ProtoRecastTile >&
ProtoRecastTiledNavMesh::tiles() const {
  // @@protoc_insertion_point(field_list:GDX.AI.ProtoRecastTiledNavMesh.tiles)
  return tiles_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace AI
}  // namespace GDX

// @@protoc_insertion_point(global_scope)
